# If you experience problems with the CKAN container not being
# able to connect to the DB, then most likely the DB has not
# started up quickly enough. Just do "docker-compose up ckan"
# again to retry

version: '3.8'
services:
  ckan:
    image: ckan
    build: ../.
    networks:
        - sub
        - db
        - sparql
    expose:
       - "5000"
    environment:
       CKAN_DATASTORE_WRITE: "postgresql://ckan:ckan@postgresql:5432/datastore_default"
       CKAN_DATASTORE_READ: "postgresql://datastore_default:datastore@postgresql:5432/datastore_default"
       CKAN_PUSHER_URL: "http://pusher:8800"
       CKAN_REDIS_URL: "redis://redis:6379/0"
       CKAN_SITE_URL: "https://${BASE_DOMAIN}"
       CKAN_SOLR_URL: "http://solr:8983/solr/ckan"
       CKAN_SQLALCHEMY_URL: "postgresql://ckan:ckan@postgresql:5432/ckan"
       CKAN_EXT_DATARETRIEVAL: "http://dataretrieval:8080"
       VIRTUAL_HOST: "${BASE_DOMAIN}"
       VIRTUAL_PORT: "5000"
       LETSENCRYPT_HOST: "${BASE_DOMAIN}"
    depends_on:
        - postgresql
  postgresql:
    build: ./postgresql-loaded/
    image: postgresql:loaded
    networks:
        - db
    expose:
        - "5432"
  solr:
    build: ./solr/
    image: fhg/solr
    networks:
        - db
    expose:
        - "8983"
  redis:
    image: redis
    networks:
        - db
    expose:
        - "6379"
  pusher:
    image: easyckan/ckan-datapusher:2.6
    networks:
        - db
    expose:
        - "8800"
  postfix:
    image: tozd/postfix:ubuntu-trusty
    expose:
      - "25"
    networks:
      - sub
      - db
  dataretrieval:
      image: docker.pkg.github.com/aksw/service-dataretrieval/dataretrieval:main
      expose:
          - "8080"
      environment:
          SPARQL_URL: "http://virtuoso:8890/sparql"
          SPARQL_USERNAME: "${VIRTUOSO_USER}"
          SPARQL_PASSWORD: "${VIRTUOSO_PASSWORD}"
          SPARQL_PORT: "8890"
          VIRTUAL_HOST: "dataretrieval.${BASE_DOMAIN}"
          VIRTUAL_PORT: "8080"
          LETSENCRYPT_HOST: "dataretrieval.${BASE_DOMAIN}"
      networks:
          - sparql
          - sub
  virtuoso:
    image: docker.pkg.github.com/aksw/docker-virtuoso/docker-virtuoso:latest
    expose:
        - "8890"
    environment:
        DBA_PASSWORD: "${VIRTUOSO_PASSWORD}"
        SPARQL_UPDATE: "true"
        VIRT_Parameters_DirsAllowed: "., /usr/local/virtuoso-opensource/share/virtuoso/vad, /virtuoso/data, /virtuoso/metadataimport"
        VIRTUAL_HOST: "sparql.${BASE_DOMAIN}"
        VIRTUAL_PORT: "8890"
        LETSENCRYPT_HOST: "sparql.${BASE_DOMAIN}"
    networks:
        - sparql
        - sub
    volumes:
        - files:/virtuoso/data
        - files2:/virtuoso/metadataimport
  import_matvoc:
    build: ./virtuoso-import-docker/
    command: /virtuoso/envsetter.sh # Use whatever script you need here
    environment:
        DBA_PASSWORD: ${VIRTUOSO_PASSWORD}
        VIRTUOSO_DATA_DIR: /virtuoso/data
        GIT_REPO: ${GIT_REPO}
        GRAPH_URI: ${GRAPH_URI}
        GIT_EMAIL: ${GIT_EMAIL}
        GIT_NAME: ${GIT_NAME}
        CRON_JOB: ${CRON_JOB} #update or import
    volumes:
        - files:/virtuoso/data
        - ./virtuoso-import-docker/id_rsa:/root/.ssh/id_rsa
        - ./virtuoso-import-docker/config:/root/.ssh/config
    networks:
        - sparql
  metadataimporter:
    build: ./store_metadata/
    environment:
        VIRTUOSO_PASSWORD: ${VIRTUOSO_PASSWORD}
        VIRTUOSO_HOST: virtuoso
        VIRTUOSO_PORT: 1111
        VIRTUOSO_USER: dba
        GRAPH: http://example.de
    volumes:
        - files2:/virtuoso/metadataimport
    networks:
        - sparql

  rdfunit:
    build: ./data_validation_with_shacl/RDFUnit/
    expose:
       - "80"
    volumes:
        - ./data_validation_with_shacl/Jekyll-RDF/my_page2:/var/www/html/reports/
    environment:
        SPARQL_ENDPOINT: "https://sparql.${BASE_DOMAIN}/sparql"
        SPARQL_GRAPH_DATA: "http://test.de/"
        SPARQL_GRAPH_SHAPES: "http://test.de/shapes/"
        VIRTUAL_HOST: "webhook.${BASE_DOMAIN}"
        LETSENCRYPT_HOST: "webhook.${BASE_DOMAIN}"
    networks:
        - sparql
        - sub
  jekyllrdf:
     build: ./data_validation_with_shacl/Jekyll-RDF/
     expose:
        - "4000"
     volumes:
         - ./data_validation_with_shacl/Jekyll-RDF/my_page2:/srv/jekyll/my_page
     environment:
         VIRTUAL_HOST: "reports.${BASE_DOMAIN}"
         VIRTUAL_PORT: "4000"
         LETSENCRYPT_HOST: "reports.${BASE_DOMAIN}"
     networks:
         - sub

networks:
    db:
    sparql:
    sub:
       external:
          name: stream_sub

volumes:
  files: {}
  files2: {}
