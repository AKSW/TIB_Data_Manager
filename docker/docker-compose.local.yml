# docker-compose build && docker-compose up
# If you experience problems with the CKAN container not being
# able to connect to the DB, then most likely the DB has not
# started up quickly enough. Just do "docker-compose up ckan"
# again to retry

version: '3.8'
services:
  ckan:
    image: ckan
    build: ../.
    networks:
        - sub
        - db
    ports:
       - "80:5000"
    environment:
       CKAN_DATASTORE_WRITE: "postgresql://ckan:postgres@postgresql:5432/datastore"
       CKAN_DATASTORE_READ: "postgresql://datastore_ro:readforfun@postgresql:5432/datastore"
       CKAN_DATAPUSHER_URL: "http://pusher:8800"
       CKAN_PUSHER_URL: "http://pusher:8800"
       CKAN_REDIS_URL: "redis://redis:6379/0"
       CKAN_SITE_URL: "http://${LOCAL_ADDRESS}:80"
       CKAN_SOLR_URL: "http://solr:8983/solr/ckan"
       CKAN_SQLALCHEMY_URL: "postgresql://ckan:postgres@postgresql:5432/ckan"
       POSTGRES_PASSWORD: "postgres"
       POSTGRES_PORT: "5432"
       DS_RO_PASS: "readforfun"
    #volumes:
       # - ./ckan-entrypoint.sh:/ckan-entrypoint.sh
       #- ../Plugins/ckanext-TIBtheme:/usr/lib/ckan/default/src/ckanext-TIBtheme
       # - ../Plugins/ckanext-SPARQLWrapper:/usr/lib/ckan/default/src/ckanext-SPARQLWrapper
       # - ../Plugins/ckanext-videoviewer:/usr/lib/ckan/default/src/ckanext-videoviewer
    depends_on:
        - postgresql
  postgresql:
    build:
      context: ./postgresql/
      args:
        POSTGRES_PASSWORD: "postgres"
        DS_RO_PASS: "readforfun"
    networks:
        - db
    expose:
        - "5432"
    environment:
        POSTGRES_PASSWORD: "postgres"
        DS_RO_PASS: "readforfun"
  solr:
    build: ./solr/
    image: solr:local
    networks:
        - db
    expose:
        - "8983"
  redis:
    image: redis:6.2
    networks:
        - db
    expose:
        - "6379"
  pusher:
    image: clementmouchet/datapusher
    networks:
        - db
    expose:
        - "8800"
  postfix:
    image: tozd/postfix:ubuntu-trusty
    expose:
      - "25"
    networks:
      - sub
      - db
  dataretrieval:
      image: kurt/dataretrieval:local
      expose:
          - "8080"
      ports:
          - "8080:8080"
      environment:
          - SPARQL_URL=http://virtuoso:8890/sparql
          - SPARQL_USERNAME=${VIRTUOSO_USER}
          - SPARQL_PASSWORD=${VIRTUOSO_PASSWORD}
          - SPARQL_PORT=8890
      networks:
          - sparql
  virtuoso:
    image: docker.pkg.github.com/aksw/docker-virtuoso/docker-virtuoso:latest
    ports:
        - "1111:1111"
        - "8890:8890"
    environment:
        - DBA_PASSWORD=${VIRTUOSO_PASSWORD}
        - SPARQL_UPDATE=true
        - VIRT_Parameters_DirsAllowed=., /usr/local/virtuoso-opensource/share/virtuoso/vad, /virtuoso/data, /virtuoso/metadataimport
    networks:
        - sparql
        - sub
    volumes:
        - files:/virtuoso/data
        - files2:/virtuoso/metadataimport
  importer:
    build: /home/kjunghanns/Documents/virtuoso-import-docker/
    command: /virtuoso/envsetter.sh # Use whatever script you need here
    environment:
        DBA_PASSWORD: ${VIRTUOSO_PASSWORD}
        VIRTUOSO_DATA_DIR: /virtuoso/data
        GIT_REPO: ${GIT_REPO}
        GRAPH_URI: ${GRAPH_URI}
        GIT_EMAIL: ${GIT_EMAIL}
        GIT_NAME: ${GIT_NAME}
        CRON_JOB: ${CRON_JOB} #update or import
    volumes:
        - files:/virtuoso/data
        - /home/kjunghanns/Documents/virtuoso-import-docker/id_rsa:/root/.ssh/id_rsa
        - /home/kjunghanns/Documents/virtuoso-import-docker/config:/root/.ssh/config
    networks:
        - sparql
  metadataimporter:
    build: ./store_metadata/
    environment:
        VIRTUOSO_PASSWORD: ${VIRTUOSO_PASSWORD}
        VIRTUOSO_HOST: virtuoso
        VIRTUOSO_PORT: 1111
        VIRTUOSO_USER: dba
        GRAPH: http://example.de
    volumes:
        - files2:/virtuoso/metadataimport
    networks:
        - sparql

  rdfunit:
    build: ~/Documents/STREAM/2.2/data_validation_with_shacl/RDFUnit/
    ports:
       - "81:80"
    volumes:
        - ~/Documents/STREAM/2.2/data_validation_with_shacl/Jekyll-RDF/my_page2:/var/www/html/reports/
    environment:
        SPARQL_ENDPOINT: "https://sparql.stream-dataspace.net/sparql"
        SPARQL_GRAPH_DATA: "http://test.de/"
        SPARQL_GRAPH_SHAPES: "http://test.de/shapes/"
    networks:
        - sparql
        - sub
  jekyllrdf:
     build: ~/Documents/STREAM/2.2/data_validation_with_shacl/Jekyll-RDF/
     ports:
        - "82:4000"
     volumes:
         - ~/Documents/STREAM/2.2/data_validation_with_shacl/Jekyll-RDF/my_page2:/srv/jekyll/my_page
     networks:
         - sub


networks:
    db:
    sub:
    sparql:

volumes:
    files: {}
    files2: {}
